/*
 * Copyright (c) 2014. Knowledge Media Institute - The Open University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NodeRed node with support for interaction with BLEs
 *
 * @author <a href="mailto:carlos.pedrinaci@open.ac.uk">Carlos Pedrinaci</a> (KMi - The Open University)
 * based on the initial node by Charalampos Doukas http://blog.buildinginternetofthings.com/2013/10/12/using-node-red-to-scan-for-ble-devices/
 */
module.exports = function(RED) {
    
    // The main node definition - most things happen in here
    function XpdActionNode(n) {
        // Create a RED node
        RED.nodes.createNode(this,n);

        // Store local copies of the node configuration (as defined in the .html)
        this.action = n.action;
        this.walkspeed = n.walkspeed;
        this.rotatespeed = n.rotatespeed;
        this.eyeangle = n.eyeangle;
        this.lightLR = n.lightLR;
        this.lightLG = n.lightLG;
        this.lightLB = n.lightLB;
        this.lightRR = n.lightRR;
        this.lightRG = n.lightRG;
        this.lightRB = n.lightRB;
        this.name  = n.name;

        var node = this;



        // control action
        node.on('input', function (msg) {
            if (msg.hasOwnProperty("payload")) {
                var resultAction = 'unkonw';
                //if (!isNaN(node.speed)){
                    switch(node.action){
                        case 'sport':
                            sport(node,node.walkspeed,node.rotatespeed);
                            msg.action = node.action;
                            msg.walkspeed = node.walkspeed;
                            msg.rotatespeed = node.rotatespeed;
                            node.status({fill: 'green',shape: 'dot',text: ''});
                            break;
                        case 'eye':
                            eyeAngle(node,1,node.eyeangle);
                            msg.action = node.action;
                            msg.eyeangle = node.eyeangle;
                            node.status({fill: 'green',shape: 'dot',text: ''});
                            break;
                        case 'light':
                            light(node,node.lightLR,node.lightLG,node.lightLB,node.lightRR,node.lightRG,node.lightRB);
                            msg.action = node.action;
                            msg.lRGB = node.lightLR+','+node.lightLG+','+node.lightLB;
                            msg.rRGB = node.lightRR+','+node.lightRG+','+node.lightRB;
                            node.status({fill: 'green',shape: 'dot',text: ''});
                            break;
                        case 'stop':
                            stop(node);
                            node.status({fill: 'green',shape: 'dot',text: ''});
                            break;
                        default:
                            break;
                    }

                  //  resultAction = node.action;

                //}
                //node.send(msg);
                var timer = setTimeout(function(){
                    node.status({});
                    clearTimeout(timer);
                }, 1000);

            }
        });

    
        node.on("close", function() {
             node.status({});
        });
    }


    function eyeAngle(_node,power,rotate_speed){
        var buf_data = [3,power,rotate_speed];
        setTimeout(function(){
            execAction(_node,buf_data);
        }, 100);
    }

    function light(_node,lR,lG,lB,rR,rG,rB){
        var buf_data = [2,lR,lG,lB,rR,rG,rB];
        setTimeout(function(){
            execAction(_node,buf_data);
        }, 200);
    }

    function sport(_node,walk_speed,rotate_speed){
        var buf_data = [1,walk_speed,rotate_speed];
        execAction(_node,buf_data);
        
    }

    function stop(_node){
        sport(_node,0,0);
        eyeAngle(_node,0,0);
        light(_node,0,0,0,0,0,0);  
    }

    function execAction(_node,buf_data){
        //if  (characteristicsEvent){
            //characteristicsEvent.write(new Buffer(buf_data));
            var msg = {payload:null};
            msg.payload = new Buffer(buf_data);
            console.log(msg.payload)
            _node.send(msg);
            msg = null;
        //}
    }
    
    // Register the node by name. This must be called before overriding any of the
    // Node functions.
    RED.nodes.registerType("XpiderAction",XpdActionNode);

}
