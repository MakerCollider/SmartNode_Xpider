/*
 * Copyright (c) 2014. Knowledge Media Institute - The Open University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NodeRed node with support for interaction with BLEs
 *
 * @author <a href="mailto:carlos.pedrinaci@open.ac.uk">Carlos Pedrinaci</a> (KMi - The Open University)
 * based on the initial node by Charalampos Doukas http://blog.buildinginternetofthings.com/2013/10/12/using-node-red-to-scan-for-ble-devices/
 */
module.exports = function(RED) {
    "use strict";
    
    // The main node definition - most things happen in here
    function XpiderNode(n) {
        // Create a RED node
        RED.nodes.createNode(this,n);
        this.name  = n.name;

        var node = this;

        var sendmsg = {};

        node.on('input', function (msg) {
            if (msg.payload !='undefined'){
                sendmsg = {};
                //console.log('---------xpider--------------');
                var data = msg.payload;
                var msg = {};
                //pedometer for walk
                var idata = data.readUInt16LE(1,true); 
                //console.log('pedometer:'+idata);
                msg["pedometer"]=idata;
                                    
                //distance
                idata = data.readUInt16LE(3,true);
                //console.log('distance:'+idata);
                if (idata > 0){
                    msg["distance"]=idata;
                }
                else{
                    msg["distance"]=-1;
                }

                //power
                idata = data.readUInt16LE(5,true);
                //console.log('power:'+idata);
                msg["power"]=idata;

                //yaw
                idata = data.readUInt16LE(7,true); 
                //console.log('yaw:'+idata);
                msg["yaw"]=idata;

                //pitch
                idata = data.readUInt16LE(9,true);
                //console.log('pitch:'+idata);
                msg["pitch"]=idata;

                //roll
                idata = data.readUInt16LE(11,true);
                //console.log('roll:'+idata);
                msg["roll"]=idata;
                                
                var isvalid = true;
                for(var i in msg){
                    if (msg[i]<0){
                        isvalid = false;
                        break;
                    }
                }

                //console.log(isvalid);
                                
                if (isvalid){
                    sendmsg = msg;
                    //node.send(msg);
                    //msg = null;
                }
            }
        });

        setInterval(function(){
            
            var objMsg = Object.keys(sendmsg);
            if(objMsg.length>0){
                //console.log(sendmsg);
               node.send(sendmsg); 
            }
        }, 2000);

    
        node.on("close", function() {

        });

    }
    
    // Register the node by name. This must be called before overriding any of the
    // Node functions.
    RED.nodes.registerType("Xpider",XpiderNode);

}
