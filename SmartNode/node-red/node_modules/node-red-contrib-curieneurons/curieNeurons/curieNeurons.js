

module.exports = function(RED){
    'use strict';
    var collect = require('../nn-extends');
    var fs = require('fs');
    var path = require('path');
    var neurons = require('./node_modules/neurons/build/Release/neurons.node');


    function curieNeuronsNode(config){
        RED.nodes.createNode(this, config);
        this.name = config.name;
        this.inputKey = config.inputKey;
        this.outputKey = config.outputKey;
        this.inputData = {};
        this.tempInputData = {};
        this.outputData = {};
        this.trainStatus = 0;
        var node = this;

        node.status({fill: 'green',shape: 'dot',text: 'ready'});

        var fileName = 'neurons-train-data-file';
        var dataFile = path.join(__dirname)+'../../../../'+fileName;
        


        if (process.platform == 'darwin' || process.platform == 'linux'){
            dataFile = './'+fileName;
        }
        else if(process.platform == 'win32'){
            dataFile = path.join(__dirname)+'../../../../'+fileName;
        } 


        var containerData = [];
        fs.exists(dataFile, function(exists) {
            console.log(exists);
            if (exists) {
               var input = fs.createReadStream(dataFile);
               readLines(input, func);
            }
        });


        this.on('input', function(msg){
            console.log('=====curieNeurons=======');
                node.status({fill: 'green',shape: 'dot',text: _G_ControlMode});
                console.log(_G_ControlMode);
                var input_key = 'input';
                var output_key = 'output';
                var _input = node.inputKey;
                var _output = node.outputKey;
                (_input == '' || _input.length == 0) ? input_key = input_key : input_key = node.inputKey;
                (_output == '' || _output.length == 0) ? output_key = output_key : output_key = node.outputKey;

                //check data complete.
                if (msg.hasOwnProperty(input_key)){
                    node.inputData = msg[input_key];
                    //console.log('collect-input:');
                    //console.log(node.inputData);
                }

                if (_G_ControlMode == 'train'){
                    // collect input & output
                    if (msg.hasOwnProperty(output_key)){
                        
                        node.outputData = msg[output_key];

                        for (var i in node.outputData) {
                            node.outputData[i] = msg.category;
                        }
                        //console.log('collect-output:');
                        //console.log(node.outputData);
                    }

                    var mode_key = 'save';
                    if (msg.hasOwnProperty(mode_key)){
                        if (msg[mode_key] == true){
                           // node.inputData = {'distance':20,'power':30,'yaw':31};
   
                            var arrIn = Object.keys(node.inputData);
                            var arrOut = Object.keys(node.outputData);
                            if (arrIn.length >0 && arrOut.length > 0){
                                var groupData = {
                                    'input':node.inputData,
                                    'output':node.outputData,
                                };
                                
                                var data = '1';
                                data += ','+arrIn.length;

                                for (var i in node.outputData) {
                                    data += ','+node.outputData[i]; 
                                }

                                for (var i in node.inputData) {
                                    data += ','+node.inputData[i]; 
                                }
                                msg.data = data;
                                //node.send(msg);

                                var result = neurons.Learn(data);
                                if (result>0){
                                    msg.payload = "learn neurons size:"+result;
                                    node.send(msg);
                                }
                                
                                console.log("data-set:");
                                console.log(groupData);

                                //save net data
                                var trainData = data+'\n';
    
                                fs.exists(dataFile, function(exists) {
                                    if (exists) {
                                        fs.appendFile(dataFile, trainData, function (err) {
                                            if (err) {
                                                node.status({fill: 'red',shape: 'dot',text: 'train-data save faild!'});
                                            }
                                            node.status({fill: 'green',shape: 'dot',text: 'train-data save success!'});
                                            console.log("neurons train data file "+fileName+" is generated success!");
                                        });
                                  } else {
                                    fs.writeFile(dataFile, trainData, function (err) {
                                        if (err) {
                                            node.status({fill: 'red',shape: 'dot',text: 'train-data save faild!'});
                                        }
                                        node.status({fill: 'green',shape: 'dot',text: 'train-data save success!'});
                                        console.log("neurons train data file "+fileName+" is generated success!");
                                    });
                                  }
                                });
 
                            }
                        }
                    }

                }

                if (_G_ControlMode == 'run'){
                    collect.clearAllData();
                    var arrIn = Object.keys(node.inputData);
                    if (arrIn.length >0){
                        var data = '0';
                        data += ','+arrIn.length;

                        for (var i in node.inputData) {
                            data += ','+node.inputData[i]; 
                        }

                        msg.data = data;
                        //node.send(msg);
                        
                        var category = neurons.Classify(data);
                        if (category){
                            msg.payload = category;
                            node.send(msg);
                        }
 
                    }

            
                }
                if (_G_ControlMode == 'none'){
                    collect.clearAllData();
                }
        });

        //readLine 
        function readLines(input, func) {
          var remaining = '';
          input.on('data', function(data) {
            remaining += data;
            var index = remaining.indexOf('\n');
            while (index > -1) {
              var line = remaining.substring(0, index);
              remaining = remaining.substring(index + 1);
              func(line);
              index = remaining.indexOf('\n');
            }
         
          });
         
          input.on('end', function() {
            if (remaining.length > 0) {
              func(remaining);
            }
            console.log(containerData);
            for (var i in containerData) {
                var result = neurons.Learn(containerData[i]);
                if (result>0){
                    console.log("learn neurons size:"+result);
                }
            }
          });
        }
     
        function func(data) {
          containerData.push(data);
        }
    }
    

 

    
    RED.nodes.registerType('curieNeurons', curieNeuronsNode);
}